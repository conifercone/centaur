import java.nio.charset.StandardCharsets
import java.time.LocalDateTime

plugins {
    alias(libs.plugins.dependencyManagement) apply(false)
    alias(libs.plugins.springboot) apply(false)
    alias(libs.plugins.lombok) apply(false)
    alias(libs.plugins.protobuf) apply(false)
}

allprojects { project ->
    group "${GROUP}"
    version "${VERSION}"

    // 定义maven仓库地址
    repositories {
        mavenCentral()
    }

    configurations.configureEach {
        resolutionStrategy {
            // 配置缓存实时更新
            cacheChangingModulesFor 0, "seconds"
            cacheDynamicVersionsFor 0, "seconds"
        }
    }
}

subprojects { project ->
    apply plugin: libs.plugins.getJava().get().getPluginId()
    apply plugin: libs.plugins.getIdea().get().getPluginId()
    apply plugin: libs.plugins.getCheckstyle().get().getPluginId()
    apply plugin: libs.plugins.getDependencyManagement().get().getPluginId()
    apply plugin: libs.plugins.getLombok().get().getPluginId()

    // java工具链配置
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
            vendor = JvmVendorSpec.ORACLE
        }
    }

    tasks.withType(Javadoc).configureEach {
        def javaDocDir = layout.buildDirectory.dir('docs/javadoc').get()
        delete(javaDocDir)
        options.encoding = StandardCharsets.UTF_8.name()
        options.charSet = StandardCharsets.UTF_8.name()
        failOnError = false
        destinationDir = file(javaDocDir)
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = StandardCharsets.UTF_8.name()
    }

    compileJava.dependsOn(processResources)

    // 打包自定义设置
    jar {
        into("META-INF/") {
            from rootProject.file("LICENSE")
        }
        afterEvaluate {
            // 获取buildBy 优先使用git user email属性
            String gitUserEmail = providers.exec {
                commandLine("git", "config", "user.email")
            }.standardOutput.asText.get().trim()
            var buildBy = gitUserEmail.isBlank() ? System.getProperty("user.name").trim() : gitUserEmail
            String hash = providers.exec {
                commandLine("git", "rev-parse", "HEAD")
            }.standardOutput.asText.get().trim()
            String scmBranch = providers.exec {
                commandLine("git", "symbolic-ref", "--short", "-q", "HEAD")
            }.standardOutput.asText.get().trim()
            String scmCommitMessage = providers.exec {
                commandLine("git", "log", "--pretty=format:%s", hash, "-1")
            }.standardOutput.asText.get().trim()
            String scmCommitAuthor = providers.exec {
                commandLine("git", "log", "--pretty=format:%an", hash, "-1")
            }.standardOutput.asText.get().trim()
            String scmCommitDate = providers.exec {
                commandLine("git", "log", "--pretty=format:%cd", hash, "-1")
            }.standardOutput.asText.get().trim()
            manifest {
                attributes 'Implementation-Title': archiveBaseName
                attributes 'Implementation-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': buildBy
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
                attributes 'Automatic-Module-Name': "${project.group}.${project.name.replaceAll("-", ".")}"
                attributes 'SCM-Branch': scmBranch
                attributes 'SCM-Commit-Hash': hash
                attributes 'SCM-Commit-Message': scmCommitMessage
                attributes 'SCM-Commit-Author': scmCommitAuthor
                attributes 'SCM-Commit-Date': scmCommitDate
            }
        }
    }

    tasks.configureEach {
        if (it.name == "bootJar") {
            // 获取buildBy 优先使用git user email属性
            String gitUserEmail = providers.exec {
                commandLine("git", "config", "user.email")
            }.standardOutput.asText.get().trim()
            var buildBy = gitUserEmail.isBlank() ? System.getProperty("user.name").trim() : gitUserEmail
            String hash = providers.exec {
                commandLine("git", "rev-parse", "HEAD")
            }.standardOutput.asText.get().trim()
            String scmBranch = providers.exec {
                commandLine("git", "symbolic-ref", "--short", "-q", "HEAD")
            }.standardOutput.asText.get().trim()
            String scmCommitMessage = providers.exec {
                commandLine("git", "log", "--pretty=format:%s", hash, "-1")
            }.standardOutput.asText.get().trim()
            String scmCommitAuthor = providers.exec {
                commandLine("git", "log", "--pretty=format:%an", hash, "-1")
            }.standardOutput.asText.get().trim()
            String scmCommitDate = providers.exec {
                commandLine("git", "log", "--pretty=format:%cd", hash, "-1")
            }.standardOutput.asText.get().trim()
            manifest {
                attributes 'Implementation-Title': archiveBaseName
                attributes 'Implementation-Version': archiveVersion
                attributes 'Application-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Built-By': buildBy
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
                attributes 'Automatic-Module-Name': "${project.group}.${project.name.replaceAll("-", ".")}"
                attributes 'SCM-Branch': scmBranch
                attributes 'SCM-Commit-Hash': hash
                attributes 'SCM-Commit-Message': scmCommitMessage
                attributes 'SCM-Commit-Author': scmCommitAuthor
                attributes 'SCM-Commit-Date': scmCommitDate
            }
        }

    }

    // 代码自动审查配置
    checkstyle {
        toolVersion = '10.13.0'
        configFile = file("${rootProject.projectDir}/code_checks.xml")
    }

    dependencyManagement {
        imports {
            mavenBom(libs.springBootDependencies.get().toString())
            mavenBom(libs.springCloudDependencies.get().toString())
            mavenBom(libs.springCloudAlibabaDependencies.get().toString())
        }
    }

    // 通用依赖
    dependencies {
        implementation libs.springboot
        implementation libs.bundles.jackson
        implementation libs.jetbrainsAnnotations
        implementation libs.apiguardian
        implementation libs.guava
        implementation libs.commonsLang3
        testImplementation libs.junitJupiter
        annotationProcessor libs.springBootConfigurationProcessor
    }

    test {
        useJUnitPlatform()
    }
}
