//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess

import java.nio.charset.StandardCharsets
import java.time.LocalDateTime

plugins {
    alias(libs.plugins.dependencyManagement) apply(false)
    alias(libs.plugins.springboot) apply(false)
    alias(libs.plugins.lombok) apply(false)
    alias(libs.plugins.protobuf) apply(false)
    alias(libs.plugins.license) apply(false)
}

allprojects { project ->
    group "${GROUP}"
    version "${VERSION}"

    // 定义maven仓库地址
    repositories {
        mavenCentral()
    }

    configurations.configureEach {
        resolutionStrategy {
            // 配置缓存实时更新
            cacheChangingModulesFor 0, "seconds"
            cacheDynamicVersionsFor 0, "seconds"
        }
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

subprojects { project ->
    apply plugin: libs.plugins.getJava().get().getPluginId()
    apply plugin: libs.plugins.getJavaLibrary().get().getPluginId()
    apply plugin: libs.plugins.getIdea().get().getPluginId()
    apply plugin: libs.plugins.getDependencyManagement().get().getPluginId()
    apply plugin: libs.plugins.getLombok().get().getPluginId()
    apply plugin: libs.plugins.getLicense().get().getPluginId()

    // java工具链配置
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(21)
        }
    }

    tasks.withType(Javadoc).configureEach {
        def javaDocDir = layout.buildDirectory.dir('docs/javadoc').get()
        delete(javaDocDir)
        options.encoding = StandardCharsets.UTF_8.name()
        options.charSet = StandardCharsets.UTF_8.name()
        failOnError = false
        destinationDir = file(javaDocDir)
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = StandardCharsets.UTF_8.name()
    }

    compileJava.dependsOn(processResources)

    // 打包自定义设置
    jar {
        into("META-INF/") {
            from rootProject.file("LICENSE")
        }
        manifest {
            attributes 'Implementation-Title': archiveBaseName
            attributes 'Implementation-Version': archiveVersion
            attributes 'Built-Gradle': gradle.gradleVersion
            attributes 'Build-OS': System.getProperty("os.name")
            attributes 'Build-Jdk': System.getProperty("java.version")
            attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
            attributes 'Automatic-Module-Name': "${project.group}.${project.name.replaceAll("-", ".")}"
        }
    }

    tasks.configureEach {
        if ("bootJar".is(it.name)) {
            manifest {
                attributes 'Implementation-Title': archiveBaseName
                attributes 'Implementation-Version': archiveVersion
                attributes 'Application-Version': archiveVersion
                attributes 'Built-Gradle': gradle.gradleVersion
                attributes 'Build-OS': System.getProperty("os.name")
                attributes 'Build-Jdk': System.getProperty("java.version")
                attributes 'Build-Timestamp': LocalDateTime.now().format("yyyy-MM-dd HH:mm:ss")
                attributes 'Automatic-Module-Name': "${project.group}.${project.name.replaceAll("-", ".")}"
            }
        }
    }

    tasks.configureEach {
        if ("bootBuildImage".is(it.name)) {
            imageName.set("conifercone/${project.name}:${project.version}")
        }
    }

    // 源代码许可配置
    license {
        encoding = StandardCharsets.UTF_8.name()
        ignoreFailures = true
        header = rootProject.file("source_code_head.txt")
        includes(["**/*.java", "**/*.sql", "**/*.xml", "**/*.yml"])
        excludes(["**/client/api/grpc/*.java"])
        mapping "java", "SLASHSTAR_STYLE"
        mapping "properties", "SCRIPT_STYLE"
        mapping "sql", "SLASHSTAR_STYLE"
        mapping "xml", "XML_STYLE"
        mapping "yml", "SCRIPT_STYLE"
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.organization = "kaiyu.shan@outlook.com"
    }

    dependencyManagement {
        imports {
            mavenBom(libs.springBootDependencies.get().toString())
            mavenBom(libs.springCloudDependencies.get().toString())
        }
    }

    // 通用依赖
    dependencies {
        implementation libs.springboot
        implementation libs.springBootLog4j2
        implementation libs.bundles.jackson
        implementation libs.jetbrainsAnnotations
        implementation libs.apiguardian
        implementation libs.guava
        implementation libs.commonsLang3
        testImplementation libs.junitJupiter
        annotationProcessor libs.springBootConfigurationProcessor
    }

    test {
        useJUnitPlatform()
    }
}
